#!/bin/sh

export SERVICE=$(which service)

# Detects the System's primary IP address
detect_ip () {
	primaryaddr=`/sbin/ifconfig | grep inet | cut -d " " -f 2 | head -n1`
	if [ $primaryaddr ]; then
		logger_info "Primary address detected as $primaryaddr"
		address=$primaryaddr
		return 0
	else
		logger_info "Unable to determine IP address of primary interface."
		echo "Please enter the name of your primary network interface: "
		read primaryinterface
		primaryaddr=`/sbin/ifconfig $primaryinterface | grep 'inet' | cut -d " " -f2 | head -n1`
		if [ "$primaryaddr" = "" ]; then
			# Try again with FreeBSD format
			primaryaddr=`/sbin/ifconfig $primaryinterface|grep 'inet' | awk '{ print $2 }'`
		fi
		if [ $primaryaddr ]; then
			logger_info "Primary address detected as $primaryaddr"
			address=$primaryaddr
		else
			fatal "Unable to determine IP address of selected interface.  Cannot continue."
		fi
		return 0
	fi
}

# Disables sendmail
disable_sendmail() {
	path="/etc/rc.conf"

	# Create temporary file with content
	echo '

# Disable Sendmail
sendmail_enable="NO"
sendmail_submit_enable="NO"
sendmail_outbound_enable="NO"
sendmail_msp_queue_enable="NO"
' > $TMPDIR/disable-sendmail.rc.conf

	# Avoid Duplicating
	fgrep '# Disable Sendmail' $path >/dev/null
	if [ "$?" != 0 ]; then
		# Write content to correct path (must be appended)
		cat $TMPDIR/disable-sendmail.rc.conf >> $path
	fi
}

# Disable some sendmail specific daily maintenance routines
disable_sendmail_tasks() {
	path="/etc/periodic.conf"

	# Create temporary file with content
	echo '

# Disable Sendmail
daily_clean_hoststat_enable="NO"
daily_status_mail_rejects_enable="NO"
daily_status_include_submit_mailq="NO"
daily_submit_queuerun="NO"
' > $TMPDIR/disable-sendmail.periodic.conf

	# Avoid Duplicating
	fgrep '# Disable Sendmail' $path >/dev/null
	if [ "$?" != 0 ]; then
		# Write content to correct path (must be appended)
		cat $TMPDIR/disable-sendmail.periodic.conf >> $path
	fi
}

# Enable services at boot
enable_services() {
	# If there is an rc.conf.d directory, use that
	# Otherwise use the regular rc.conf file.
	if [ -e /etc/rc.conf.d ]; then
		path="/etc/rc.conf.d/virtualmin.conf"
		# Truncate first
		echo "" > $path
	else
		path="/etc/rc.conf"
	fi

	# Force becuase it's not working otherwise
	path="/etc/rc.conf"

	# Create temporary file with content
	echo '

# Virtualmin
apache24_enable="YES"
named_enable="YES"
webmin_enable="YES"
usermin_enable="YES"
postfix_enable="YES"
dovecot_enable="YES"
' > $TMPDIR/virtualmin.rc.conf

	# Avoid Duplicating
	fgrep '# Virtualmin' $path >/dev/null
	if [ "$?" != 0 ]; then
		# Write content to correct path (must be appended)
		cat $TMPDIR/virtualmin.rc.conf >> $path
	fi
}

# Set a Webmin directive or add it if it doesn't exist
setconfig () {
	sc_config=$2
	sc_value=$1
	sc_directive=`echo $sc_value | cut -d'=' -f1`
	if grep -q $sc_directive $2; then
		sed -i '' -e "s#$sc_directive.*#$sc_value#" $sc_config
	else
		echo $1 >> $2
	fi
}

# Sets the system hostname
set_hostname () {
	i=0
	while [ $i -eq 0 ]; do
		if [ "$forcehostname" = "" ]; then
			printf "Please enter a fully qualified hostname (for example, host.example.com): "
			read line
		else
			logger_info "Setting hostname to $forcehostname"
			line=$forcehostname
		fi
		if ! is_fully_qualified $line; then
			logger_info "Hostname $line is not fully qualified."
		else
			hostname $line
			detect_ip
			if grep $address /etc/hosts; then
				logger_info "Entry for IP $address exists in /etc/hosts."
				logger_info "Updating with new hostname."
				shortname=`echo $line | cut -d"." -f1`
				sed -i "s/^$address\([\s\t]+\).*$/$address\1$line\t$shortname/" /etc/hosts
			else
				logger_info "Adding new entry for hostname $line on $address to /etc/hosts."
				printf "$address\t$line\t$shortname\n" >> /etc/hosts
			fi
		i=1
	fi
	done
}

# Setup Package Repositries
setup_pkg_repos() {
	# Bootstrap PKG if needed
	pkg -N
	if [ $? == 1 ]; then
		export ASSUME_ALWAYS_YES=YES
		pkg bootstrap
		unset ASSUME_ALWAYS_YES
	fi

	mkdir -p $CONFIG_BASE/pkg/repos/

	# Disable FreeBSD standard repository
	echo 'FreeBSD: { enabled: no }' > $CONFIG_BASE/pkg/repos/FreeBSD.conf

	# Enable Virtualman repository
	echo -e 'Virtualmin: {\n\t url: "http://pkg.morante.net/virtualmin/${ABI}",\n\t enabled: yes\n}' > $CONFIG_BASE/pkg/repos/Virtualmin.conf

	# Update repositories
	pkg update
}

# Copy a file if the destination doesn't exist
testcp () {
	if [ ! -e $2 ]; then
		cp $1 $2
	fi
}

# mkdir if it doesn't exist
testmkdir () {
	if [ ! -d $1 ]; then
		mkdir -p $1
	fi
}

generate_self_signed_ssl_certificate () {
	logger_info "Generating a self-sign certificate and key pair..."

	# SSL store
	mkdir -p $LOCAL_BASE/etc/ssl/certs; mkdir -p $LOCAL_BASE/etc/ssl/private

	host=`hostname`

	# Generate a new SSL key and certificate for this host
	openssl req -newkey rsa:2048 -x509 -nodes -out $TMPDIR/cert.pem -keyout $TMPDIR/key.pem -days 1825 -sha256 >/dev/null 2>&1 <<EOF
.
.
.
Virtualmin Server on $host
Self Signed SSL Certificate
$host
root@$host
EOF

	# Check Result, adjust permisssions
	if [ "$?" = "0" ]; then
		logger_info "Sucessful"
		chmod 400 $TMPDIR/key.pem
		chmod 444 $TMPDIR/cert.pem
	fi
}

# Starts all the background services
start_services () {
	logger_info "Sarting all required services"
	local_services='named apache24 postfix dovecot webmin usermin'

	for local_service in $local_services; do
		$SERVICE $local_service start
	done
}
